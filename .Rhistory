o <- seq(5500,54500,1000)
mc(1000,50,o) -> mc3
#2c
plot(mc1[,1],mc1[,2],'l',main="Monte-Carlo coverage probabilities",xlab="t",ylab="Probability estimate")
lines(mc2[,1],mc2[,2],lwd=3)
lines(mc3[,1],mc3[,2],lwd=5)
legend("bottomright", c("1000 samples","100 samples","10 samples"), lwd= c(5,3,1))
#MC estimate of true coverage probabilities
sum(mc1[,2])/103
sum(mc2[,2])/103
sum(mc3[,2])/103
#3a now we go back to our rawdata
data3 <- rawdata
next3 <- c(101,0,0,data3$lx[101] - data3$dx[101],data3$lx[101] - data3$dx[101],0,0,0,data3$lx.1[101] - data3$dx.1[101],data3$lx.1[101] - data3$dx.1[101],0)
next4 <- c(102,0,0,0,0,0,0,0,0,0,0,0)
data3 <- rbind(data3,next3,next4)
lm <- data3$lx
dm <- data3$x
lf <- data3$lx.1
df <- data3$dx.1
plot(t,lm/100000,'l',main="Survivor functions",xlab="t",ylab="S(t)")
lines(t,lf/100000,lwd=3)
legend("bottomleft",c("Male","Female"),lwd=c(1,3))
z <- seq(1,101)
plot(z,-log(lm[2:102])/-log(lf[2:102]),main="Ratio of cumulative hazards",xlab="t",ylab="M_male(t)/M_female(t)",'l')
install.packages("data.table")
.libPaths()
library(dpyr)
library(dplyr)
library(stats)
library(tidyr)
library(stringr)
library(nnet)
RAND = runif(100, 0, 1)
)
runif(100, 0, 1)
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0)
)
library(dplyr)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0)
)
cumsum(1:10)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME)
)
data
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
data
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
# start with generating the data set
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
which.max(data$AVERAGE)
which.max(data$AVERAGE[-1])
v
v
data$AVERAGE[-1]
data
max_vector <- c()
heads_first <- c()
for i in (1:100) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
for (i in 1:100) {
data <- data.frame(
}
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:100) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
max_vector
heads_first
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:1000) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
max_vector
heads_first
# plot vector of maximum values
histogram(max_vector)
hist(max_vector)
hist(max_vector)
hist(max_vector, breaks = 1)
hist(max_vector, breaks = 100)
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:10000) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
# plot vector of maximum values
hist(max_vector, breaks = 100)
table(as.factor(max_vector))
data
which.max(data$AVERAGE)
max_vector[max_vector==1] <- 0
hist(max_vector, breaks = 100)
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:10000) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
hist(max_vector, breaks = 100)
max_vector <- max_vector[max_vector=!1]
hist(max_vector, breaks = 100)
v
max_vector
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:10000) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
# plot vector of maximum values
hist(max_vector, breaks = 100)
max_vector_new <- max_vector[max_vector!=1]
hist(max_vector_new, breaks = 100)
table(as.factor(max_vector_new))
hist(max_vector, breaks = 100, freq = TRUE, )
hist(max_vector, breaks = 100, freq = FALSE)
hist(max_vector_new, breaks = 100)
hist(max_vector_new, breaks = 101)
hist(max_vector_new, breaks = 101)
hist(max_vector_new, breaks = 200)
hist(max_vector_new, breaks = 101)
hist(c(1,1,1,2,2))
hist(c(1,1,1,2,2), breaks=2)
hist(c(1,1,1,2,2,3,4,4,4), breaks=2)
hist(c(1,1,1,2,2,3,4,4,4), breaks=4)
hist(c(1,1,1,2,2,3,4,4,4), breaks=5)
table(max_vector_new)
barplot(table(max_vector))
table(max_vector)
max_vector_new <- max_vector[max_vector!=1]
barplot(table(max_vector_new))
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:10000) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
# plot vector of maximum values
barplot(table(max_vector))
max_vector_new <- max_vector[max_vector!=1]
barplot(table(max_vector_new))
table(max_vector)
data
table(max_vector_new)
# start with generating the data set
max_vector <- c()
heads_first <- c()
for (i in 1:100000) {
data <- data.frame(
INDEX = c(1:100),
RAND = runif(100, 0, 1)
)
data <- data %>% dplyr::mutate(
OUTCOME = ifelse(RAND >= 0.5, 1, 0),
RUNNING_SUM = cumsum(OUTCOME),
AVERAGE = RUNNING_SUM / INDEX
)
heads_first[i] <- data$OUTCOME[1]
max_vector[i] <- which.max(data$AVERAGE)
i <- i + 1
}
# plot vector of maximum values
barplot(table(max_vector))
max_vector_new <- max_vector[max_vector!=1]
barplot(table(max_vector_new))
table(max_vector_new)
getwd()
setwd("C:/User/user/Documents/github_repos/loan-analysis")
setwd("C://User//user//Documents//github_repos//loan-analysis")
dir("C://User//user//Documents//github_repos//loan-analysis")
dir("C://User//user//Documents//")
dir("C://User//user//Documents")
file.dir("C://User//user//Documents")
files.dir("C://User//user//Documents")
files("C://User//user//Documents")
dir.exists("C://User//user//Documents//github_repos//loan-analysis")
file.exists("C://User//user//Documents//github_repos//loan-analysis")
file.exists("C://User//user//Documents//")
dir.exists("C://User//user//Documents//")
version
version
df_data
source('~/github_repos/r-shiny-machine-learning/helper.R', echo=TRUE)
summarise(df_data)
summary(df_data)
?numericInput
library(shiny)
?numericInput
summary(df_data[diabetes=="neg"])
summary(df_data[,diabetes=="neg"])
summary(df_data[, diabetes=="neg"])
df_data[diabetes]
summary(df_data[, dt_data$diabetes=="neg"])
summary(df_data[dt_data$diabetes=="neg"])
summary(df_data[dt_data$diabetes=="neg", ])
summary(df_data[df_data$diabetes=="neg", ])
runApp()
setwd()
getwd()
setwd("C:/Users/user/Documents/github_repos/r-shiny-machine-learning"
)
runApp()
runApp()
runAPp()
R.home()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
new_data
new_data <- data.frame(
pregnant=10,
glucose=100,
pressure=75,
triceps=3,
insulin=600,
mass=40,
pedigree=1,
age=20
)
logit_predict <- stats::predict(logit_model, newdata=new_data, type="response")
logit_predict <- as.factor(ifelse(logit_predict == 0, "pred_neg", "pred_pos"))
dt_logit_predict <- rbind(dt_train, data.frame(dt_test[, 1:8], diabetes=logit_predict))
logit_predict <- as.factor(ifelse(logit_predict == 0, "pred_neg", "pred_pos"))
dt_logit_predict <- rbind(df_data, data.frame(dt_test[, 1:8], diabetes=logit_predict))
dt_logit_predict <- rbind(df_data, data.frame(new_data, diabetes=logit_predict))
plot <- ggplot(data=dt_logit_predict,
aes(x=glucose,
y=log(mass),
shape=diabetes,
colour=diabetes)) +
geom_point() +
scale_shape_manual(values=c(1, 1, 17, 17)) +
scale_colour_manual(name="diabetes",values=c("chartreuse3", "red", "chartreuse4", "red1"))
plot
levels(df_data$diabetes)
levels(df_data$diabetes) <- c("negative", "positive")
?selectInput
runApp()
runApp()
runApp()
new_data
new_data <- data.frame(new_values=t(new_data))
new_data$variable <- rownames(new_data)
new_data
new_data <- data.frame(
pregnant=10,
glucose=100,
pressure=75,
triceps=3,
insulin=600,
mass=40,
pedigree=1,
age=20
)
logit_predict <- round(logit_predict * 100, 1)
logit_model <- stats::glm(diabetes ~ ., data=df_data, family="binomial")
logit_predict <- round(logit_predict * 100, 1)
return(paste0("Likelihood of diabetes: ", logit_predict, "% \n"))
paste0("Likelihood of diabetes: ", logit_predict, "% \n")
logit_predict
logit_predict <- round(stats::predict(logit_model, newdata=dt_test[, 1:8], type="response"), 0)
logit_predict <- round(stats::predict(logit_model, newdata=new_data, type="response"), 0)
logit_predict <- round(logit_predict * 100, 1)
return(paste0("Likelihood of diabetes: ", logit_predict, "% \n"))
paste0("Likelihood of diabetes: ", logit_predict, "% \n")
logit_model
summary(v)
summary(logit_model)
runApp()
logit_predict <- stats::predict(logit_model, newdata=new_data, type="response")
logit_predict_rounded <- round(logit_predict * 100, 1)
logit_predict_rounded
runApp()
logit_predict_out <- as.factor(ifelse(logit_predict == 0, "predicted_negative", "predicted_positive"))
runApp(0)
runApp()
logit_predict_out <- as.factor(ifelse(round(logit_predict) == 0, "predicted_negative", "predicted_positive"))
dt_logit_predict <- rbind(df_data, data.frame(new_data, diabetes=logit_predict_out))
dt_logit_predict
input$x_var <- "glucose"
input <- list()
input$x_var <- "glucose"
input$y_var <- "mass"
plot <- ggplot(data=dt_logit_predict,
aes(x=get(input$x_var),
y=get(input$y_var),
shape=diabetes,
colour=diabetes)) +
geom_point() +
scale_shape_manual(values=c(1, 1, 17, 17)) +
scale_colour_manual(name="diabetes",values=c("chartreuse3", "red", "chartreuse4", "red1"))
plot
runApp()
runApp()
runApp()\
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(
model_prediction = pca_logit_predict,
actual_class = dt_test$diabetes
)
runApp()
runApp()
data(PimaIndiansDiabetes2)
sum(is.na(PimaIndiansDiabetes2))
sum(complete_cases(PimaIndiansDiabetes2))
sum(complete.cases(PimaIndiansDiabetes2))
dim(complete.cases(PimaIndiansDiabetes2))
complete.cases(PimaIndiansDiabetes2)
sum(complete.cases(PimaIndiansDiabetes2))
nrow(complete.cases(PimaIndiansDiabetes2))
nrow()
nrow(PimaIndiansDiabetes2)
runApp()
